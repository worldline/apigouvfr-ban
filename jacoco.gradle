apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    // Custom reports directory can be specfied like this:
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants')
            .all { variant ->
        def variantName = variant.name
        def unitTestTask = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
                "$unitTestTask"
        ]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"

            reports {
                html.enabled(true)
                xml.enabled(true)
                csv.enabled(true)
            }

            def excludes = [
                  // android
                  '**/R.class',
                  '**/R$*.class',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  '**/*Test*.*',
                  'android/**/*.*',
                  // sealed and data classes
                  '**/*$Result.*',
                  '**/*$Result$*.*',
                  '**/*serializer*.*',
                  '**/com/worldline/apigouvfr/ban/parameter/*.*',
                  '**/com/worldline/apigouvfr/ban/datasource/response/*.*'
            ]

            def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir,
                                        excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}",
                                        excludes: excludes)

            classDirectories.setFrom(files([
                    javaClasses,
                    kotlinClasses
            ]))

            def variantSourceSets = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
            sourceDirectories.setFrom(project.files(variantSourceSets))

            def androidTestsData =
                    fileTree(dir: "${buildDir}/outputs/code_coverage/${variantName}AndroidTest/connected/",
                            includes: ["**/*.ec"])

            executionData(files([
                    "$project.buildDir/jacoco/${unitTestTask}.exec",
                    androidTestsData
            ]))
        }
    }
}